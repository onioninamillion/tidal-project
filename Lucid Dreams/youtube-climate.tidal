cons

--dream 1
d1 
$ degradeBy 0.4
$ within (0.8,1) (+ n (irand 80))
-- $ loopAt 2
-- $ every 2 ((slow 2).(# speed "-1"))
$ weave 10 (stack [
                   s "[ama:3]" # cut 1,
                   s "[greta:6]"  # cut 3
                --  , s "[sleep:2]"  # cut 2 
                 ]) 
[
accelerate 0.4,
begin (osc 3.3 0 0.9 saw 6),
attack (osc 5 0.4 0.3 saw 5),
sustain 0.3
]
# nl
# room 0.2
# size 0.4
# lpf (osc64 10 1200 14000 sine)
-- # bpf (osc64 11 1200 2000 sine)
# cps 0.1
# gain 0.9

hush


solo d1

let nr = n (slow 10000 $ (irand 10000))


d2 silence

--dream 2 (con)
d1
$ degradeBy 0.8
$ weave 2 (s "sleep" # nl) 
[
accelerate 0.4,
begin (osc 3 0 0.8 saw 4),
-- attack (osc 5 0 0.3 saw 5),
sustain 1
]
# cut 1
# lpf (osc64 16 1200 4000 sine)
# cps 0.5
# gain 0.6

hush

d1 silence

hush


d1
$ degrade
$ striate 12
$ s "ama"
# speed (osc64 12 0.97 1.03 sine)
# delay 0.7
# delaytime (segment 32 $ range 0.01 0.025 $ rand)
# delayfeedback 0.7
-- # nl


d1
$ striate "<1 .. 32>"
$ every 3 (hurry 0.9)
$ juxBy 0.4 (trunc 0.5 . degrade)
$ juxBy 0.6 ((+ comb 0.9 ). degrade  . rev)
$ sound "ama" 
# nl
-- # cut 1

hush



do 
    let world p = slow "4 4 3 2" $ struct (cat ["t(3,5,2)","t(7,16,14)","t(11,24,14)","t(9,16)","t(13,24,5)", "t(4,9)"]) $ p
    d1 
        -- $ whenmod 17 13 (slow 1.25)
        $ every 4 (palindrome)
        -- $ jux (off (slow 12 $ segment 16 $ range 0 0.5 $ saw) (slow 1.25))
        $ stack [
                sew (slow 2 $ bizy) (world $ s "sleep:5") (s "amanext*20")
                #  speed ("<[<-12 -4> .. <10 12 9>][<10 9 [8]> .. <0 -5 -8>]*[2]>" )
                |* speed (1/10) 
                # lpf (range 2000 17000 $ rand)
        ]
        # sustain (slow 3 $ range 3.4 2.73 $ saw)
        # attack (world $ 0.0125)
        # release 1
        # hold 1.5
        # cps (slow 14 $ range 0.13 0.5 $ saw)
        # nl
        -- # binshift (slow 2 $ saw)
        -- |* binshift (slow 5 $ range 0.125 1 sine)
        # cut 1

        hush

    
d1 
$ slow 1
-- $ chop 16
$ slice "<8 10 13 12>" (run 16)
$ s "greta:7"
# n4
# cps 0.25
# cut 4



hush

----signal 2

do
  let perr = segment 5 $ range (-1) 3 $ perlin2With (slow 1 $ saw*0.7) (saw*2)
  let cpse = (segment 4 $ choose [0.1,0.3,0.14,0.23] )
  d2
    $ loopAt 0.3
    $ juxBy 0.6 (+ speed (segment "30 132 [30 20]" perr) # shrand 39)
    $ (spread (striate' 50) [(9/24), (1/30), (1/20), (15/20) , (11/20)] $ sound "amanext" )
    + speed perr
    + n (slow 136 $ run 136)
    # cut 0
    # legato 1
    # gain 1.4
    -- # cps (smooth "0.7 cpse")

hush

-- semantic evolve


do
  let
    tpatt = (otrigger saw " 1 _ _ _ 1 _ _ 1 ")
            -- (trigger 2 $ range 0.1 0.9 $ slow 2 envL)
  p "sample"
    $ juxBy 0.45 (# speed (slow 50 $ range (-0.4) (-1.2) $ rand))
    $ stack [
            -- every 2 (rev) $
            -- struct bizy $
            sound "[sleep]"
            + begin  (segment 25 $ range 0 0.95 $ tpatt )
            + legato (segment 25 $ range 0.5 ( slow 50 $ range 1 35 $ saw ) $ tpatt )
            # hold   (segment 25 $ range 0.4 ( slow 50 $ range 1 30 $ saw ) $ tpatt )
            -- # release 0.6
           |+ (slow 50 $ nl)
            ]
            # gain (slow 50 $ range 0.7 1.5 $ saw )
            # lpf  (slow 50 $ range 4000 16000 $ saw )
            -- # size (slow 50 $ range 0.1 0.6 $ saw)
            -- # room (slow 50 $ range 0 0.4 $ saw)
            -- # delayfeedback (slow 50 $ range 0 0.7 $ saw)
            -- # delay 0.5
            -- # delaytime (slow 50 $ range 0 2 $ saw)
            # cps (slow 50 $ range 0.2 2.5 $ saw)
            # cut 0


hush





gg

hush

----tuning

d1
  $ stack [
          sound (struct bizy $ choose ["sleep"])
         |+ begin (segment "<30 40 50 60 70 20>" $ range 0 0.96 $ sine)
          # attack (osc64 12 0.2 1 sine)
          # release 10
          -- # pan (rand)
          # gain (slow 4 $ range 0.8 0.7 $ sine)
          # n (irand 200)
          -- # speed (range (-1) 1 $ rand)
  ]
  # hpf (choose [1000,2300,2500,3000,4000])


  hush



---sleep

d1 
$ s "sleep"
# cps "<0.13 0.12 0.125 0.123>"
# nl
# cut 1


d1 
-- $ every 3 (fast 1.25)
$ s "sleep"
# cps "<0.13 0.12 0.125 0.123>"
+ begin ( degradeBy 0.2 (sew bizy (segment 32 $ range 0 0.95 $ sine ) (segment 32 $ range 0 0.95 $ rand )))
# nl
# gain 0.8
-- # smear (range 0 0.3 $ rand)
-- # comb (osc64 12 0 0.4 sine)
-- # attack (osc64 13 0 0.04 sine)
-- # release 2
# cut 0

resetCycles

d2 
$ s "sleep"
# nl
# cps "<0.13 0.12 0.125 0.123>"
-- # hpf 1000
-- # comb 0.3
-- |+ n (irand 80)
# gain 0.7


hush


