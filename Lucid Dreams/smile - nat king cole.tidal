0:select sample   1:cps      2:hold     3:begin cyc
4:hpf             5:speed

d1 $ weaveWith 4 ( s "smilektv" )
[
--  (+| speed (trigger 1 $ segment 1 $ range 0.5 1.2 $ slow 10 envL)),
 (+| cps  (trigger 1 $ segment 5 $ range 0.7 (range 0.4 3 (cF 3 "1")) $ slow 15.7 envL)).(|+ pan "<0.3 0.7>"),
--  (+| hold (trigger 1 $ segment 4 $ range 0 0.6 $ slow 15.6 envL)),
 (+| end (trigger 1 $ segment 4 $ range 1 0.1 $ slow 4 envL)),
 (+| begin (trigger 1 $ segment 14 $ range 0 0.98 $ slow 13 envL))
--  (+| accelerate (trigger 1 $ degradeBy 0 $ segment 1 $ range 0 5 $ slow 40 envL))
  -- stutWith 3 0.15 (# comb (range 0 0.5 $ slow 13 $ sine))
]
# nselect "0"
-- |+ speed  (range (-1) 1 (cF 1 "5" ) )
-- |+ hpf  (trigger 1 $ segment 13 $ range 50 4000 $ slow 20.9 envL)
# hpf (oscm "4" 50 2000 $ sine) 
|+ lpf  (trigger 1 $ segment 26 $ range 8000 4000 $ slow 20.9 envL) 
-- # cut 1
# sustain 1.5
# (slow 1 $ nl)
|+ begin (segment 20 $ oscm "3" 0 1 $ saw)
# atrl 0.14 (range 0.2 1 $ slow 9 envL) 
# hold (range 0 1 (cF 0 "2"))


let oscm a b c p = slow (range 1 50 (cT 1 a)) $ range b c $ p
    nselect a = n (range 0 127 (cF 0 a))

hush


d1 
-- $ (+| cps ( range 0.3 3 $ slow 4 $ segment 32 $ otrigger saw " 1 _ _ 1 _ _ _ 1 " ))
$ weaveWith 3 ( s "pa1" )
[
--  (+| speed (trigger 1 $ segment 1 $ range 0.5 1.2 $ slow 10 envL)),
--  (+| cps ( range 0.3 3 $ slow 12 $ otrigger saw " 1 _ _ 1 _ _ _ 1 " )),
--  (+| gain ( range 0.3 1 $ slow 4 $ otrigger saw " 1 _ _ _ 1 _ _ 1 " )),
 (+| cps  (trigger 1 $ segment 5 $ range 0.7 3 $ slow 15.7 envL)).(|+ pan "<0.3 0.7>"),
 (+| hold (trigger 1 $ segment 4 $ range 0 0.6 $ slow 15.6 envL)),
 (+| end (trigger 1 $ segment 4 $ range 1 0.1 $ slow 4 envL)),
 (+| begin (trigger 1 $ segment 14 $ range 0 0.98 $ slow 13 envL))
--  (+| accelerate (trigger 1 $ degradeBy 0 $ segment 1 $ range 0 5 $ slow 40 envL))
  -- stutWith 3 0.15 (# comb (range 0 0.5 $ slow 13 $ sine))
]
# n 0
-- + speed  (trigger 1 $ segment 36 $ range "<0.6 3.8 7 0.3 -0.2> 2" 2 $ slow (choose [0.1,0.4,0.2,0.03]) envL )
+| hpf  (trigger 1 $ segment 13 $ range 50 4000 $ slow 20.9 envL) 
+| lpf  (trigger 1 $ segment 26 $ range 8000 2000 $ slow 20.9 envL) 
-- # cut 1
-- # sustain 1.5
-- # (slow 1 $ nl)
|+ begin (segment 216 $ range 0 1 $ slow 15 $ saw)
# atrl 0.14 (trigger 1 $ segment 26 $ range 0.4 1 $ slow 9 envL) 
# hold 0.2
# cps 0.4


hush

d1 
-- $ degradeBy 0.5
$ superimpose (
            --   (# gain (osc64 (slow 23 $ range 0.5 32 $ sine) 0.6 1 sine )).      
              (degradeBy (trigger 1 $ slow 50 $ range 0.2 0.6 $ envL)). --CC This
              -- (# up (slow (slow 32 $ range 0.15 12 $ sine) $ smooth $ "24 12")).
              ((+| cps  (trigger 1 $ segment 16 $ range 0.12 3 $ slow 35.7 envL)).(# pan rand)).
              (# begin (trigger 1 $ slow "40" $ range 0 0.8 $ envL)).
              -- (+ speed (trigger 1 $ slow "60" $ range 12.1 (12) $ envL)).
              (# hpf (trigger 1 $ slow 20 $ range 200 10000 $ envL))
              )
$ s "smilektv"
+ begin (osc 15 0.01 0.91 sine 5)
-- + begin (trigger 1 $ slow 15 $ range 1 0  $ envL)
# atrl (choose [0.7,0.4,0.4]) (choose [1.4,1.5,1.3])
-- * speed (-1)
# nl
-- # accelerate (choose [-0.09,0.09])
+| cps (slow (slow 32 $ range 0.5 32 $ sine) $ range 0.25 0.05 $ saw)
-- # cut 1

hush

--day 02 2018/12/25 

d1
  -- $ almostNever ( (off 1 (|+ n (slow 136 $ run 136)))
  -- .(# sound "[[smilektv*5 [bd*4 smilektv] sn smilektv]*[[1] [1.25 [5]] 2 3]*2]")
  -- .(|+ release "10")
  -- .(#cut "0 0 1")
  -- -- )
  -- $ every 3 (within (0.75,1.3) (
  --  (# gain "0.5" )
  -- .(# cutoff (slow 20 $ segment 20 $ range 200 3000 $ sine))
  -- .(density 1.25)
  -- .(stut' 15 (range 0 2 $ (cT 0.25 "12")) (# speed "0.5"))))
  -- $ every 5 (within (0,0.75) $ juxBy 0.1 (|+ n (segment 40 $ range 1 10 $ sine )))
  -- $ off 1 ((juxBy 1 (+n "1")).(# begin (segment 40 $ range 1 0 $ sine )).rev)
  $ sound "[[smilektv*5 [bd*4 smilektv] smilektv]*[[2] [1.25 [5]] 2 3.3]*2]"
  -- |+| n (segment 30 $ range 1 12 $ saw )
  -- |+ n "[16]"
  |+ nl
  # begin (segment "<24>" $ range 0 (cF 1 "13") $ saw )
  # cut 1
  -- # hold "1.3"
  -- # release (slow 20 $ segment 40 $ range 0.3 1 $ saw )
 |+ release (slow 9 $ segment 10 $ range 0.5 (range 0 5 $ (cF 5 "14")) $ sine )
  -- # attack (slow 200 $ segment 200 $ range 0.14 0.175 $ saw )

  hush

--day 3 **spread + striate** 
d1
--   $ almostNever (loopAt 4)
  -- $ jux (|+| speed (segment (choose [16,1,12]) $ range 0.5 1.2 $ density 0.25 sine))
  $ (spread (striate' 100) [(10/24), (1/30), (1/20), (15/20) , (10/20)] $ sound "smilektv" )
 |+ nl

  hush





d1
  $ jux ((slow 1.05).(0.01<~))
  -- $ degradeBy 0.6
  $ loopAt 1
  $ sound"smilektv"
  + begin (fast 1 $ smooth $ segment 16 $ range 0.1 0.9 $saw)
  + gain (fast 1 $ smooth $ segment 16 $ range 0.4 1 $saw)
  -- # release 0.15
  # hold 0.4
  + release (segment 20 $ (iter 16) (smooth "[0.2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]"))
  + pan "[0.7 0.3]/2.05"
  + n (slow 136 (run 136))
  # cps (slow 20 $ segment 32 $ rangex 1 0.5 $ saw)

  d2
    -- $ slow 2
    $ (0.10 ~>)
    $ loopAt 1
    $ sound "smilektv"
    + begin (fast 1 $ smooth $ segment 16 $ range 0 1 $saw)
    + gain (fast 1 $ smooth $ segment 16 $ range 0.3 0.9 $saw)
    + accelerate (fast 1 $ smooth $ segment 16 $ range 0 (-0.8) $saw)
    # release 1.2
    + pan "[0.3 0.7]/2"
    # hold 0.2
    + hold ((iter 16) (smooth "[ 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0]"))
    + n (slow 136 (run 136))


  hush

--day 07

xfade "smilektv"
 -- $ juxBy ((slow 5 $ segment 8 $ range 0 1 $ saw)) (chop 10)
  -- $ chop (round <$> (slow 4 $ smooth $ segment 16 $ range 20 40 $ sine))
  -- $ juxBy 0.8 ((chop (round <$> (smooth $ segment 15 $ range 1 7  $ saw))).rev.
  --              (slow "<1 1.2 3>")
  --             )
  -- $ off 1 ((struct (every 2 ((slow 2).inv )"[t [t [t f]] ~ t]") ).(# speed 2).(# room 0.9).(# size 0.5))
  $ sound "smilektv"
  -- # cut 1
  + begin (slow a $ smooth $ segment 16 $ range 0 1 $saw)
  + release (slow 5 $ smooth $ segment 8 $ range 0.125 0.4 $ rand)
  + lpf (slow 16 $ smooth $ segment 14 $ range 800 8500 $ saw)
  + cps ((slow 11 $ smooth $ segment 32 $ range 1 10 $ sine) + (slow 4 $ smooth $ segment 16 $ range 1 10 $ saw))
  + n (slow (136*a) $ run 136)

  
do 
  let a = (range 1 12 (cT 1 "0"))
  d1 
  $ sound "smilektv"
  -- # cut 1
  + begin (slow a $ smooth $ segment 16 $ range 0 1 $ saw)
  + release (slow 15 $ smooth $ segment 8 $ range 0.125 0.4 $ rand)
  + lpf (slow 16.4 $ smooth $ segment 14 $ range 800 8500 $ saw)
 |+ cps ((slow 200 $ smooth $ segment 32 $ range 1 10 $ sine) + (slow 4 $ smooth $ segment 16 $ range 1 10 $ saw))
 # up (choose [-12,0,12,12,0,0,0])
 |+ n (slow (range 136 1360 (cT 136 "1")) $ run 136)



hush



--day 08

:t weave

hush

d1 $ weave 3 ((tremolodepth (range 0.5 0.8 $ sine)))
                   [
                    struct (every "<3 4>" (slow 1.5) "[[t f <t>][t f] t [t [f t]]]") $
                    sound "smilektv"
                    + begin
                    (
                      -- slow 6 $
                      -- slow "<6.7 7.8 8.9 9.9 3.5 20>" $
                      smooth $ segment 16 $ range 0 1 $saw)
                    +  release (slow 5.08  $ smooth $ segment 8 $ range 0.125 0.9 $ saw)
                    +| release ((0.125 <~) $ slow 5 $ smooth $ segment 16 $ range 0.125 0.5 $ saw)
                    -- *| release ((0.130 <~)  $ slow 20.05 $ smooth $ segment 20 $ range 0.5 4 $ saw)
                    + lpf (slow 16 $ smooth $ segment 14 $ range 2500 4500 $ saw)
                    -- + room (slow 10 $ segment 12 (choose [0.8,0,1.2]))
                    -- # size 0.3
                    # nl
                    ,
                     (0.04<~)
                     $ sound "smilektv"
                     -- + speed
                     + begin (slow 7 $ smooth $ segment 16 $ range 0 1 $saw)
                     + release (slow 5.08 $ smooth $ segment 8 $ range 0.125 0.9 $ saw)
                     +| release ((0.125 <~) $slow 5 $ smooth $ segment 16 $ range 0.5 0.4 $ saw)
                     *| release ((0.25 <~) $slow 5.05 $ smooth $ segment 20 $ range 0.5 1 $ saw)
                     + lpf (slow 16 $ smooth $ segment 14 $ range 800 6500 $ saw)
                     # gain 0.1
                     # nl
                    ]
    # nl
    -- # tremolorate 2



hush

-- day 09 --start from this
d1 $ loopAt 8 $ rev $ linger 0.5 $ chop 32 $ sound "bev" # cps 0.5

d1 
  -- $ repeatCycles 8   
  -- $ every 4 rev
  -- $ plyWith "<10 25>" ((|* gain 0.91).(0.01 ~>)) 
  $ loopAt 1
--   $ juxBy 0.6 ((slow 3).(0.01 <~))
--   $ linger (segment 12 (choose [0.5,0.75,0.25,0.125,0.625])) 
  $ chop (segment 4 (choose [64,48,52]))
  -- $ slice 8 ( "0 1 <3 2> <2 5 4> 4*2 [5 ~] 6 5 7*2") 
  $ sound "smilektv" 
  # cps 1
  -- # release 1.2
  -- # lpf 3000
  -- # bpf "[110,220,440]"
--  |+ bpf ((slow 12 $ range 0 3000 $ sine ))
--   # bpq 0.4
  # nl
  # cut 0

  hush

d1 $ loopAt 2 
   $ linger ((slow 8 $ smooth $ segment 1 $ range 0.5 1 $ saw))
   $ chop 16 $ sound "smilektv"
   # nl


d1
   $ chop (range 1 127 (cI 1 "0"))
  --  $ linger ((slow 1  $ segment 3 $ range 0.5 1 $ saw))
  -- "[<0.25 1 1 [1 0.25]>]"
   -- $ stuck [
   --          linger "[0.25]",
   --          linger "1"
   --          ]
   $ stut 1 0.9 0.02
   $ sound "smilektv"
   # nl
   + begin (slow (range 1 5 (cT 1 "1")) $ segment (16) $ rangex 0.05 1 $ saw)
  --  # attack 0.06
   # cut 1
   # cps 0.4

   hush

  hush

import qualified Sound.Tidal.Chords

  hush

  d3
    $ (slow 1)
    -- $ degradeBy 0.1
    -- $ loopAt 1
    $ off 0 (
            (chunk 1 (+ speed (smooth $ segment 60 $ rangex 0 1 $saw))).
            (+ n (arp "<up down diverge>" "<a'm9'8 e'7sus4'8>"))
            )
    -- $ chop 2
    -- $ chunk 2 (+ release (iter 16 (smooth "[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]")))
    -- + pan "[1 0]/2"
    $ sound"[smilektv]"
    -- # release 0.45
    + begin (slow (smooth "<1 1 [2 1] [1 4] 1>" )$ smooth $ segment 16 $ range 0 1 $saw)
    + release (slow "<1>" $ smooth $ segment 60 $ rangex 0.5 0.75 $saw)
    + n (slow 136 (run 136))
    # cut 0

hush

d1 $ n (arp "<up down diverge>" "<a'm9'8 e'7sus4'8>") # sound "superpiano"

let a= 16
in
d3
-- $ inside a (rev)
$ chunk a ((+ begin (slow a $ (run a)*0.1)).rev.(# speed 0.75))
$ sound "smilektv"
+ begin ((run a)*0.1)
+| end (slow 0.5 $ (run a)*0.1 + 0.4)
-- # cut
+ n (slow 136 $ run 136)

let a = "<[16 4] [24 10] [8 20]>"
in
d3
  -- $ chunk 16 ((+ begin (slow a $ (run a)*0.1)).rev.(# speed 0.75))
--   $ inside 16 (whenmod 8 1 ((slow 2).(+ speed (segment 16 $ rangex 0.5 1 $ sine))))
  $ striate a
  $ sound "[smilektv]"
  # nl
  + end (slow 1 $ (run a)*0.1 )


d1
$ inside 2 (
              (inside 4
              ((every 3 (+ speed "1"))
             .(rev)
             .(off 0
                   (
                   (+ lpf (slow 3 $ segment 16 $ rangex 200 7500 $sine))
                  -- .(# room 0.4)
                  -- .(# size 0.5)
                   )
                   ))
              )
            -- .(# gain (fast 1 $ "[0.75 1.2]"))
            -- .(|+ end (slow 1 $ (run 8)*0.1 ))
            )
$ striate 16
$ sound "[smilektv]"
# n (slow 136 $ run 136)
# cps 0.5

hush

d1
$ inside 4 (
              (inside 3
              (+ n "[1 0 1]/3")
             .(every 2 (+ speed "1"))
             .(rev)
             -- .(off 0
             --       (
             --       (+ lpf (slow 3 $ segment 16 $ rangex 200 3500 $sine))
             --      .(# size 0.2)
             --      .(# room 0.5)
             --       )
                   -- )
              )
            -- .(# gain (fast 1 $ "[0.75 1.2]"))
            -- .(|+ end (slow 1 $ (run 8)*0.1 ))
            )
$ striate 16
$ sound "[smilektv]"
# n (slow 136 $ run 136)

hush

d3
-- $ every 4 (within (6/8,1) ((chop 2).(# size 0.5)))
-- $ every 3 (within (1/4,1/2) ((slow (8/4)).(# size 0.5)))
$ inside 2 (
              (inside 5
              (every 5 (+ speed "[1]"))
             .(rot "<0 0 1 2 3>")
            --  .(+ gain (slow 2 $ segment 20 $rangex 0.75 1 $ saw))
             .(rev)
            --  .(|+ accelerate "[0.01 0 0.02 -0.5]/5")
             .(off 0
                   (
                  (+ lpf (slow 3 $ segment 16 $ rangex 1000 5000 $ sine))
                  .(scramble 4)
                  -- .(# size 0.7)
                  -- .(# room 0.8)
                  -- .(linger 0.8)
                  -- .(+ pan (segment 4 $ tri))
                   )
                   )
              )
            -- .(# gain (fast 1 $ "[0.75 1.2]"))
            -- .((|+ end (slow "<2 2.25>" $ (run 8)*0.1 )))
            )
$ striate "[8]"
$ sound "[smilektv]"
# nl
-- # cut 2
# cps "[0.33 0.35?]"
-- # djf 2000

:t djf

hush

-- # djf (trigger 1 $ range 0.1 0.9 $ slow 5 envL)
-- # cps (slow 72 $ segment 72 $ range 0.5 2$ saw )

hush

d1
  $ inside 4 rev
  $ sound "numbers"
  + n " 1 2 3 4 5 6 7 8"

:t inside

---day 10 smooth line


d1
  -- $ tickle
  $ every 4 (rev)
  $ every 5 (|+ accelerate "{0.9 -0.9 1 0.5}%16")
  $ rot "<1 0 1 1 [2 0] [0 1]>"
  $ segment (segment "<1 1 2 5 8 15 21>" $ range 150 500 $ rand)
  $ speed (slow "<1 1.2 <1.4 4 10> 1.5 4>" $ smooth ("[-1.01 1.5 0.18 1.2]" - "[ 1 1 1 1]"))
  # s "[tt4b:0(3,<8 [1 16]>,2) dtna4b(2,9,4)]/2"
  # n (slow 95 $ run 95)
  # rsaw 15 3.5 1.5 30
  # bsaw 8 0 1 20
  # cut 2
  + cps "[1 0.75 1.2 1.75 1 0.75]/5"

hush

-----day 11 smooth binary
d1
  $ fast 1
--   $ bpf (segment "<50 41 30 16 24 >" $ smooth (struct bizy $ range 200 2000 $ sine))
  $ s "smilektv"
  # nl
  # rsaw 4 3.5 2.5 10
  + bsaw 15 0.01 0.99 100
  # cps (slow 12 $ rangex 0.5 1.25 $ sine)
  # cut 1

hush

---Day 12 straite

d1
  $ (density 3)
  $ striate (iter "<2 3 4>" "[4 3 2 2 2 5 <6 ~ 4>]")
  $ sound "smilektv"
  # nl  
  # cut 0
  # release (segment 32 (choose [0.25,1.2,1.12,0.3]))
  # cps 0.73

hush





d1
  $ slow 2
  $ (density 3)
  $ striate (iter "<2 2 4>" "[4 32 2 5 <6 ~ 4>]")
  $ sound "smilektv"
  # nl  
  # cut 1
  -- # release (segment 32 (choose [0.25,1.2,1.12,0.3]))
  # cps (134/120)

  hush

d2
  $ struct ("t(2,4)")
  $ sound "dtna4b"
  + nl
  # cut 1
  # cps "0.75"
  # unit "c"

hush


d2
  -- $ every 4 (iter 6)
  $ stutWith 4 (0.25) (# begin (segment 16 $ range 0 0.95 $ saw) )
  $ sound (pfit "<3 5 2 1 1>" ["smilektv:1", "smilektv:2", "smilektv:3", "smilektv:4"] "{0 ~ ~ [1] 4 ~ <2> ~ }")
  # nl
  # cut 0
  # cps "1.25"
--   # unit "c"

hush



d2
  -- $ every 4 (iter 6)
  -- $ slow 2
  -- $ stutWith 2 (0.0625) (+ begin (segment 16 $ range 0 0.5 $ saw) )
  $ sound (pfit "4" ["numbers:1", "numbers:2", "numbers:3", "numbers:4", "numbers:5" , "numbers:6" , "numbers:7"] "{0 ~ ~ 1 ~ ~ 2 3 }")
  # cut 0
  # cps "1.5"
  # unit "c"
  # speed "0.4"



d1 $ sound (fit 1 ["bd", "sn", "arpy", "arpy:1", "casio"] "0 ~ ~ 1 ~ ~ 2 ~ ")


hush

-----splice

d1 
-- $ slow 1.5
-- $ (layer [loopAt 1,id])
-- $ slow 1.25 
$ layer [degradeBy 0.2,id]
-- $ iter 12
-- $ every 5 (within (3/16,8/16) (linger "0.125"))
-- $ every 9 (within (9/16,11/16) (slow 2))
-- $ every 6 (within (3/16,5/16) (slow 2))
$ splice 16 "0 1 2 <3> 4 [[5]] 6 <7 4> 8 9 10 <11 [12]> 14 13 12 15" "smilektv" 
-- $ slowcat [splice 16 "0 1 2 <3> 4 [~ [5 ~]] 6 <7 ~> 8 9 10 <11 [12]> 12 13 14 15" "fancy" , splice 16 "0 1 2 <3> 4 [~? [5 ~?]] 6 <7 ~?> 8 9 10 <11 [12]> 14 13 12 15" "fancy" ]
-- + n (slow 2 $ run 4)
+ (slow 2 nl)
-- # cps 0.8
-- # release 1
# speed "[1,0]"
-- # cut "0 0 1 1"

hush

d1 
$ slow 1.2
-- $ every 5 (sometimes $ within (0,0.25) ((rip' 0 0.25 3 1 "<0.725>").(slow 1)))
-- $ slow "<2 1 1 1>"
-- $ linger (0.0625*5)
-- $ ("<0.25 0.2>" ~>)
-- $ (0.01625 ~>)
-- $ every 9 (# release (range 0.07 4 $ saw))
$ whenmod 16 4 (sometimes (within (0.75,1)(iter 8)))
-- $ layer [degradeBy 0.6 ,id]
-- $ every 5 (within (2/16,7/16) ((iter 8)))
$ every 4 (within (9/16,12/16) (slow 2))
$ every 6 (within (3/16,5/16) (slow 2))
-- $ splice 16 "0 1 2 <3> 4 5 6 <7> 8 9 [10 ~] <11> 12 [13] 14 15" "fancy" 
$ splice 16 "0 1 2 <3> 4 [~? [5 ~?]] 6 <7 ~?> 8 9 10 <11 [12]> 14 13 12 15" "smilektv" 
+ nl 
# speed "[1]"
# cut "0"
# cps 0.8
# release 0.3
-- # room 0.3 
-- # size 0.6

hush

d1 
$ loopAt (0.5)
$ fast 1.2
$ inside 2 (juxBy 0.2 rev )
$ slice (round <$> (segment 1 $ range 1 16 $ (cF 1 "0"))) (run "<8 7 [18 10] [6 14]>") "smilektv" 
+ nl 

:t slice

hush


d2 
$ sound (select (cF 0.5 "0") ["smilektv*1","smilektv*2","smilektv*3.4","smilektv*4"])
# up (select (cF 0.5 "1") [2,5,8])
# cut 1
# release 4
# n (range 0 127 (cF 1 "2"))

hush


d2 
$ struct (select (cF 0.5 "3") ["t","t*1.4","t*2.8","t*2","t*7"])
$ sound (select (cF 0.5 "0") ["smilektv","smile"])
# up (select (cF 0.5 "1") [2,5,8])
# cut 0
# release 4
# n (range 0 127 (cF 1 "2"))
# gain 0.8

hush

  
d3
$ fast 1.25 $ struct (select (cF 0.5 "7") ["t","t*1.4","t*2.8","t*2","t*7"])
$ sound (select (cF 0.5 "4") ["smile"])
# up (select (cF 0.5 "5") [2,5,8])
# cut 1
# release 4
# n (range 0 127 (cF 1 "6"))
# gain 0.9
# cps 1.1

d3 silence 

hush


d1 $ sound "smile:1"