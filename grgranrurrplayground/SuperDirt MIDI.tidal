

let a="[hh*8,[bd ~]*2 ~ [~ bd*2] ~ , ~ [sn ~ ~ sn][~ sn ~ ~ ][sn ~ ~ sn]]"
    b="[hh!!!! hh:7 hh!,[bd ~]*2 ~ [~ [bd ~]] ~ , ~ [sn ~ ~ sn][~ sn ~ ~ ][~ ~ sn ~]]"
    c="[hh!!!! hh:14 hh!,[~ bd*2] ~ [~ [bd ~]] ~ , [~ sn ~ ~ ][ sn ~ ~ sn ][~ sn ~ ~][~ ~ sn ~]]"

    

---S_O Amen KTV 0317

do 
  let deg1 = (degradeBy 0.3)
  -- kbass = s "midi*12"
  p "kaivobass"
  $ stack [
            degradeBy 0.1
            $ n "[[12!!!! ~ 12!]/3,[10!!!!!! 10]/2,[12 10!!!]]"
            # legato "[0.12 [0.15 2]]%12"
            # s "midi" 
            # midichan "0"
            ,
            degradeBy 0.1 
            $  s "midi*12"
            # ccn "15"
            # ccv (slow 4 $ range 0 127 $ saw)
            |+ ccv ((slow 3 $ range 120 0 $ saw))
            ,
            degradeBy 0.1 
            $  s "midi*12"
            # ccn "16"
            # ccv (slow 5 $ range 127 0 $ sine) 
          ] 

hush


let 
    kaivo = s "midi"  # midichan 1
    kaivomod = ccn 21 # s "midi"  # midichan 1
    kaivomod2 = ccn 22 # s "midi"  # midichan 1
    kaivomod3 = ccn 23 # s "midi"  # midichan 1
    kaivorate = ccn 30 # s "midi"  # midichan 1
    kaivopitch = ccn 31 # s "midi"  # midichan 1
    k2aivomod = ccn 21 # s "midi"  # midichan 2
    k2aivomod2 = ccn 22 # s "midi"  # midichan 2
    k2aivomod3 = ccn 23 # s "midi"  # midichan 2
    k2aivorate = ccn 30 # s "midi"  # midichan 2
    k2aivopitch = ccn 31 # s "midi"  # midichan 2



d1
  -- $ every 3 ((|+| n "[10 [0 0]]/3"))
  -- $ every 5 ((slow 1.7))
  -- $ every 4 (sometimes ((0.25 <~).(stutWith 5 0.125 (+ gain 0.2))))
  -- $ every 3 (((slow 12).(stutWith 10 (0.0625*7) (+ speed (saw))) ))
  $ stack [
            --  every 3 (within (0,0.25) (stut' 3 0.4 (slow 3 )))
            -- $ every 4 (within (0.5,0.625) (0.125 ~>).(stut 2 0.2 0.125))
            -- -- $ every 5 (within (0.5,0.75) (density 0.3))
            -- -- $ n "[[[10 ~]*2 ~ [~ 10*2] ~ ]/3 [[10 ~]*2 ~ [~ [10 ~]]~ ]/9 [[10 ~]*2 ~ [~ 10*2] ~]/6 ]"
            -- -- $n "[[[10 ~]*2 ~ [~ 10*2] ~ ]/3 [[10 ~]*2 ~ [~ [10 ~]]~ ]/6 [[10 ~]*2 ~ [~ 10*2] ~]/6 ]/2"
             n "[[[10 ~]*2 ~ [~ 10*2] ~ ] [[10 ~]*2 ~ [~ [10 ~]]~ ]/2 [[10 ~]*2 ~ [~ 10*2] ~] ]/3"
                -- # dur "[[~ 0.2 ~ ~ ][ 1 ~ ~ 0.8 ][~ 0.5 ~ ~][~ ~ 1 ~]]*3"
            -- # dur "[{1 0.2 [1 0.5]}%4,[~ 1*2] ~ [~ [1 ~]] ~]"
            # s "midi" 
            # midichan "[1 <2,1>]*4"
            # gain 1.2
            # dur "0.2"
            ,
            n "[[~ [12 ~ ~ 12][~ 12 ~ 12? ][12 ~ ~ 12]]/3 [ ~ [0 ~ ~ 12][~ 12 ~ ~ ][12 12? ~ 12]]/3 [[~ 12 12? ~ ][ 12 ~ ~ 12 ][~ 12 ~ ~][~ ~ 12 ~]]/6]/3"
            -- n "[[~ [12 ~ ~ 12][~ 12 ~ 12? ][12 ~ ~ 12]][ ~ [0 ~ ~ 12][~ 12 ~ ~ ][12 12? ~ 12]]/2 [[~ 12 12? ~ ][ 12 ~ ~ 12 ][~ 12 ~ ~][~ ~ 12 ~]]]/3"
            # s "midi" 
            # midichan "[2 <1,2>]*3"
            # dur "0.21"
            ,
            (0 ~>)
            $ slow 2
            $ n "~ ~ ~ 0"
            # s "midi"
            # midichan 3
            ,
            kaivomod +| ccv (segment "<48 160 70 32>" $ smooth $ "127 100 ~ 20 ~") ,
            kaivomod2 +| ccv (struct "t(3,16)" $ segment 50 $ range 0 127 $ saw) ,
            k2aivomod +| ccv (segment "<48 160 70 32>" $ smooth $ "127 100 ~ 20 ~") ,
            k2aivomod2 +| ccv (struct "t(3,16)" $ segment 50 $ range 0 127 $ saw)
        ]
        # cps "<0.33 0.25 0.29 0.25 [0.25 [0.25 0.5]*[3 2]]>"
        -- + cps 0.25
        -- # cut 1


---------------------------------------
d3
  $ every 5 (sometimes (density (3/2)))
  -- $ every 6 (sometimes (within ((8/16),(12/16))(density 0.75)))
  $ n "[[~ [12 ~ ~ 12][~ 12 ~ 12? ][12 ~ ~ 12]]/3 [ ~ [0 ~ ~ 12][~ 12 ~ ~ ][12 12? ~ 12]]/3 [[~ 12 12? ~ ][ 12 ~ ~ 12 ][~ 12 ~ ~][~ ~ 12 ~]]/6]/3"
  -- $ n "[[~ [12 ~ ~ 12][~ 12 ~ 12? ][12 ~ ~ 12]][ ~ [0 ~ ~ 12][~ 12 ~ ~ ][12 12? ~ 12]]/2 [[~ 12 12? ~ ][ 12 ~ ~ 12 ][~ 12 ~ ~][~ ~ 12 ~]]]/3"
  -- |+| dur "[[~ 0.2 ~ ~ ][ 1 ~ ~ 0.8 ][~ 0.5 ~ ~][~ ~ 1 ~]]"
  |+| dur "[{1 0.2 [1 0.5]}%4,[~ 1*2]/3 ~ [~ [1 ~]] ~]"
  # s "midi" 
  # midichan "2"




---------------------------------
d1
  -- $ every 5 ((|+| n "[10 [3 -12]]/3"))
  -- $ every 10 (slow 2)
  $ every 3 ((# n "[12(2,8)]").(slow 2))
  $ every 4 (sometimes (0.25 <~).(stut 3 0.6 1.7))
  $ every 5 (((slow 3).(stut 2 0.5 0.25)))
  $ n "[[12!!!! ~ 12!]/3,[10!!!!!! 10]/2]"
   -- # dur "0.5"
  -- |+| dur "[[~ 1 ~ ~ ][ 1 ~ ~ 0.8 ][~ 0.5 ~ ~][~ ~ 1 ~]]"
  -- |+| dur "[0.9 0.05]/3"
  # s "midi" 
  # midichan "0"


d2
  -- $ density 1.5
  $ zoom (0, 0.6)
  -- $ zoom (0.5 ,1)
  -- $ every 3 (within (0,0.25) (stut' 6 0.5 (slow 3 ).(0.125 <~)))
  -- $ every 4 (within (0.25,0.5) (0.25 <~))
  -- $ every 5 (within (0.5,0.75) (density 2.4))
  -- $ n "[[[10 ~]*2 ~ [~ 10*2] ~ ]/3 [[10 ~]*2 ~ [~ [10 ~]]~ ]/4 [[10 ~]*2 ~ [~ 10*2] ~]/3 ]/3"
  $ n "[[[10 ~]*2 ~ [~ 10*2] ~ ] [[10 ~]*2 ~ [~ [10 ~]]~ ]/2 [[10 ~]*2 ~ [~ 10*2] ~] ]/3"
      -- # dur "[[~ 0.2 ~ ~ ][ 1 ~ ~ 0.8 ][~ 0.5 ~ ~][~ ~ 1 ~]]*3"
      -- # dur "[{1 0.2 [1 0.5]}%4,[~ 1*2] ~ [~ [1 ~]] ~]"
      # s "midi" 
      # midichan "1"

 hush     

d3
  -- $ density 2
  -- $ zoom (0.25,0.6)
  -- $ every 5 (sometimes (rev).(density 1.6))
  -- $ every 7 (sometimes (within ((6/16),(12/16)) (density 0.75)))
  -- $ n "[[~ [12 ~ ~ 12][~ 12 ~ 12? ][12 ~ ~ 12]]/3[ ~ [0 ~ ~ 12][~ 12 ~ ~ ][12 12? ~ 12]]/4 [[~ 12 12? ~ ][ 12 ~ ~ 12 ][~ 12 ~ ~][~ ~ 12 ~]]/3]/3"
  $ n "[[~ [12 ~ ~ 12][~ 12 ~ 12? ][12 ~ ~ 12]][ ~ [0 ~ ~ 12][~ 12 ~ ~ ][12 12? ~ 12]]/2 [[~ 12 12? ~ ][ 12 ~ ~ 12 ][~ 12 ~ ~][~ ~ 12 ~]]]/3"
  -- |+| dur "[[~ 0.2 ~ ~ ][ 1 ~ ~ 0.8 ][~ 0.5 ~ ~][~ ~ 1 ~]]"
  |+| dur "[{1 0.2 [1 0.5]}%4,[~ 1*2]/3 ~ [~ [1 ~]] ~]"
  # s "midi" 
  # midichan "2"


d3
$ wedge (2) 
(n "[[~ [12 ~ ~ 12][~ 12 ~ 12? ][12 ~ ~ 12]][ ~ [0 ~ ~ 12][~ 12 ~ ~ ][12 12? ~ 12]]/2 [[~ 12 12? ~ ][ 12 ~ ~ 12 ][~ 12 ~ ~][~ ~ 12 ~]]]/3")
(n "[[~ [12 ~ ~ 12][~ 12 ~ 12? ][12 ~ ~ 12]]/3 [ ~ [0 ~ ~ 12][~ 12 ~ ~ ][12 12? ~ 12]]/4 [[~ 12 12? ~ ][ 12 ~ ~ 12 ][~ 12 ~ ~][~ ~ 12 ~]]/3]/3")
# s "midi" 
# midichan "2"


--TSK02 0102
d1 
$ rev
  $ within (0.25,0.8) (slow "<7 1 9 10>")
  -- $ within (0.2,0.9) ((slow 2).(1.7<~))
  $ within (0.3,0.3) (#dur "[0.36 0.16 0.6 0.1]/5")
  -- $ iter 2
  $ whenmod 5 2 ((spin 4).(rev))
  $ every 4 (|+| n "12")
  $ cat [n "[0 14*2,5 ~,-5 ~,21 [16 9]/3]*4",
  -- n "[[[0 ~] 17*2]/6,5 ~,-5 ~,21 [16 9]/3]*4",
  n "[0 12*2,[5 ~]? ~,[-7 ~] -7 [ ~ 0] [12 ~]?,23 [12 9] [~ ~ 24]/4 12 ]*2"]
  # s "midi"
  # midichan "[1,2]"
  # cps 0.4
  -- #velocity "1"
  -- #dur "2"

--TSK03 SCMIDI 2019/3/16 4/7

d1 
  -- $ sometimes (rev)
  -- $ degradeBy 0.5
  -- $ linger (0.0625*6)
  -- $ ("<0.25 0.5 0.75 1>" <~)
  $ within (0.25,0.75) (slow "<5 2 9 10>")
  $ whenmod 5 1 ((spin "<2 4>").(rev))
  $ every 4 (stutWith 12 (0.0625*12) ((|+| n "12").(|+ dur (range 0.5 0.1 $ saw ))))
  $ every 5 (chunk 4 (iter 8))
  -- $ every 6 ((# midichan "[1,2(3,16,<2 6>)]").(|+ cps (slow 1$ range 0.5 1.2 $ saw)))
  $ stack [
            cat [n "[0 14*2,5 ~,-5 ~,21 [16 9]/3]*<4>",
                --  struct ("t*10") $ n (scale "lydianMinor" "0 .. 12"),
            -- n "[[[0 ~] 17*2]/6,5 ~,-5 ~,21 [16 9]/3]*4",
            n "[0 12*2,[5 ~ ]? ~,[-7 ~] -7 [ ~ -12] [12 ~]? , 23 [12 9] [~ ~ 24]/5 12]*2"]
            # s "midi"
            # midichan "[2,1(3,<16,8>,<2 7>)]"
            -- # legato (slow 12 $ range 0.01 0.4 $ sine)
            -- ,
            -- struct ("t*16")
            -- $ s "midi"
            -- # ccn "15"
            -- # ccv (range 0 127 $ saw) 
            -- # midichan 2
            -- ,
            -- slow "<4 5 2>"
            -- $ n "[~ 2]"
            -- # s "midi"
            -- + n (iter 8 $ run 10)
            -- # midichan "2"
            -- # midichan "[1(3,8)]"
            ]
            # cps 0.5  
            -- # cps "<1 1.14 0.6 1.25 1.23 0.9>"

scaleList


  hush

 
ATT14

d2
    -- $ rev
    $ every 5 (off 0.25 (# n "5 7 14 17").(slow 6))
    $ within (0.25,0.5) (slow "<7 1 9 8>")
    $ within (0.2,0.9) ((slow 2).(1.7<~))
    $ iter 4
    $ whenmod 5 2 ((spin 4).(rev))
    $ every 4 (|+| n "12")
    $ n "[0 14,5 [~ 40],-5 ~,21 [16 9]/3]*4"
    -- $ n "[0 12*2,[5 ~]? ~,[-7 ~] -7 [ ~ 0] [12 ~]?,23 [12 9] [~ ~ 24]/4 12 ]*2"
    # s "midi"
    # midichan (choose [0,1,2]) 

hush

----gaaaaa

d1 
$ loopAt (0.35)
$ fast 1.2
$ splice 16 (iter 4 $ "<1 1> <3 5> <2 5*2> 5" + "<0 16 12*2 10>" + "2 3 4 5" ) "[dulu,dtna4b,yes]" 
 + nl 

 hush


--S O amenK-2
d1 
  $ rev
  $ within (0.25,0.8) (slow "<7 1 9 10>")
  -- $ within (0.2,0.9) ((slow 2).(1.7<~))
  $ within (0.3,0.8)  (# legato "[0.36 0.16 0.6 0.1]/5")
  -- $ iter 2
  $ whenmod 5 2 ((spin 4).(rev))
  $ every 4 (|+| n "12")
  $ cat [
        n "[0 14*2,5 ~,-5 ~,21 [16 9]/3]*4"
        -- ,n "[[[0 ~] 17*2]/6,5 ~,-5 ~,21 [16 9]/3]*4"
        ,n "[0 12*2,[5 ~]? ~,[-7 ~] -7 [ ~ 0] [12 ~]?,23 [12 9] [~ ~ 24]/4 12 ]*2"
        ]
  # s "midi"
  # midichan (choose [1,2,0,1,2,2])
  # cps 0.5

  hush