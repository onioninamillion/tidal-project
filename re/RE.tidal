setcps (160/120/2)

hush

do
    let 
        shift p = (1 <~)  p
        shift' x p = (x <~) p
        dis p = segment (4) $ p
        vary = 0.35
        speeds = slow (discretise 1 $ choose [1,1,1,1,2]) 
                 $ degradeBy 0.6 
                 $ shift 
                 $ s (randcat( 
                    (replicate 5 "midi*1") 
                    ++ (replicate 5 "midi*2") 
                    ++ (replicate 5 "midi*3") 
                    ++ (replicate 5 "midi*4") 
                    ++ (replicate 10 "midi*5") 
                    ++ (replicate 10 "midi*6") 
                    ++ (replicate 7 "midi*7") 
                    ++ (replicate 8 "midi*8") 
                    ++ (replicate 10 "midi*10") 
                    -- ++ (replicate 10 "midi*12") 
                    -- ++ (replicate 10 "midi*14") 
                    -- ++ (replicate 10 "midi*16") 
                    -- ++ (replicate 10 "midi*18") 
                    -- ++ (replicate 10 "midi*20") 
                      ))
    p "drums" $ sometimesBy vary (# n 5) $ shift $ speeds # n 2 # s "midi" # midichan 1 # gain 1.1 
    p "re" $ sometimesBy vary  (# gain 2)$ shift $ speeds # s "re:1" # gain 1.1 # cut 0 # release 2 + begin (slow 20 $ segment 24 (range 0 0.99 $ saw ))
    p "not drums" $ (|* gain 1) $ stack [ 
        sometimesBy vary (# gain 0.4) $ shift $ speeds # note "-6" # gain 1.1
      , sometimesBy vary (# ccv 127) $ shift $ speeds # ccv 0 # ccn 100
      , speeds # ccn 1 # ccv (dis $ range 0 127 $ shift' 300 rand) 
      , speeds # ccn 2 # ccv (dis $ range 0 127 $ shift' 301 rand) 
      , speeds # ccn 3 # ccv (dis $ range 0 127 $ shift' 302 rand) 
      , speeds # ccn 4 # ccv (dis $ range 127 127 $ shift' 303 rand) 
      , speeds # ccn 5 # ccv (dis $ shift' 304 $ choose [0,127]) 
      , speeds # ccn 6 # ccv (dis $ range 0 20 $ shift' 305 rand) 
      , speeds # ccn 7 # ccv (dis $ range 0 127 $ shift' 306 rand) 
      , speeds # ccn 8 # ccv (dis $ range 0 127 $ shift' 307 rand) 
      ] # midichan 0

hush