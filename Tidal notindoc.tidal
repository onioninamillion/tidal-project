preplace :: (Time, Time) -> Pattern String -> Pattern b -> Pattern b Source #

preplace (blen, plen) beats values combines the timing of beats with the values of values. Other ways of saying this are: * sequential convolution * values quantized to beats.

Examples:

d1$fadeIn 4 $ sound  $ preplace (1,5) "[x? [~ x] x x?,[x(3,7)]/7]" "bd sn:2 808:5 cp 808:7"

hush

bps(120/120)

d1 $ ifp ((== 0).(flip mod 2))
  (striate 4)
  (# coarse "24 48") $
  sound "hh hc"

bps (2)

d1
  $ ifp ((== 0).(flip mod 5))
  (#coarse "3 5 7")(#room "1 0.3 0.6").(0.23 <~)
  $ every 4(|+|speed "10 7 3 ")
  -- $ every 3(|+|accelerate "0.2 2.8 6")
  -- .(stut' 2 (1/120) (# vowel "{a e i o u}%5"))
  $ ifp ((== 1).(flip mod 4))
  (#speed "3 -5 [6 7 8]")(#room "0.6 4").(0.28 <~)
  $interlace
  (sound $ preplace (1,3) "[[x(3,8)]/5,x*2 ~ x,[~ ~ x] ~ ]" "bd bass3:0 sn:4 808:2")
  (sound "jungle:1 sn bd [808:1 hh*5]*2")

hush


d1 $ stut' 5 (0.125/2) (|+| gain (every 2 (0.14 <~) $ "1 2 3 5"))$ sound "bd(3,8)"

d1 silence

d1
  $ ifp ((== 0).(flip mod 5))
  (#coarse "3 5 7 ")(#room "1 0.3 0.6").(0.23 <~)
  $ every 3(|+|speed "4 2 6")
  -- $ every 4(|+|accelerate "0.2 2.8  9")
  -- .(stut' 4 (1/2) (# vowel "{a e i o u}%2"))
  $ ifp ((== 1).(flip mod 3))
  (#speed "3 -5 ~ 9")(#room "0.6  4").(0.18 <~)
  $ sound $ preplace (1,3) "[[x(3,8)],x*2 ~ x,[x! ~] ~ ]" "bd bass3 sn 808:2"

d1 $ sound $ "x(3,8)" ~ "bd sn"

d1 $ sound "[jvbass jvbass:5]*3" |+| (shape $ "1 1 1 1 1" ~ "0.2 0.9")

It is assumed the pattern fits into a single cycle. This works well with pattern literals, but not always with patterns defined elsewhere. In those cases use preplace and provide desired pattern lengths: @ let p = slow 2 $ "x x x"

d1 $ sound $ preplace (2,1) p "bd sn"
@

d1
   $ chunk 3 (slow "<1.3 1.8 1.3>").("<0.18 0.2 >" <~).(rev)
  --  $ jux (smash 3 [2,2,1,3]).(#speed "1.2").(#accelerate 0.3)
   $ sound "cp sn bd [808:1 hh:3]"


"[bd sn sn sn]" :: Pattern String


d1 $ spaceOut "1 3" "" $ sound "bd sn [~hh] cp"

hush

d1 $ when ((elem '4').show)
  (striate 4)
  $ sound "hh hc"

  hush


  d1 $ slow 2 $ weave 16 (pan tri1) [
    substruct "x/4 x/2" $ stut 3 0.9 0.5 $ substruct "x x*2" $ sound "tok(3,8)",
    substruct "x/8 x/4" $ stut 3 0.9 0.25 $ substruct "x x*2" $ sound "tok:2(5,16)/2"
    ]
    # speed "4"
    # delay "0.6" # delaytime "0.002" # delayfeedback "0.8"
    # orbit "0"
