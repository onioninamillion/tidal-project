do 
    {
        resetCycles;
        d1
        -- $ slow 2
        $ loopAt 1
        -- $ swingBy 0.24 (1/4)
        -- $ every 4 (rev)
        $ outside 2 ((juxBy 0.98 ((1/128) ~>)))
        -- $ plyWith 4 ((|* gain (struct bizy "0.91") ).(|+ cps 0.5))
        -- $ every 4 (within (0.25,0.5) ((chunk 2 (plyWith 2 (|* gain 0.51 ).(+ n 4))).slow 1))
        -- $ every 5 (within (0.75,1)   ((chunk 2 (plyWith 2 (|* gain 0.51 ).(+ n 2))).fast "<1>"))
        -- $ every "<2 3 4>" (within (3/8,4/8) (scramble "<4 8>"))
        -- $ slice 8 ("{0 [1 2] <1 3> [0 2] 4 [3 5] 7 [5 <6 7>]}") 
        $ slice 8 ("0 .. 7") 
        $ sound "getloud"
        # nl
        # bpm 150
        -- # delaytime (3.02/16)
        -- # delayfeedback 0.3
        -- + delay 0.4 
        # atrl 0.01 2.15
        -- # octer 0.1
        -- # room (choose [0.3,0.1,0.2,0.9])
        -- # size 0.1
        -- # cut 1
    }

let bpm a = cps (a/60/4)

hush