do 
    let world p = slow "<2 2 3 4>" $ struct 
                        (randcat [
                        -- "t(3,5,2)",
                    -- "t(7,16,14)",
                    -- "t(11,24,14)",
                    "t(9,16)",
                    -- "t(13,24,5)",
                    "t(4,9)"
                        ]) $ p
    d3 
        $ brak
        -- $ jux (off (slow 12 $ segment 16 $ range 0 0.25 $ saw) (slow 1.02).(|- speed 0))
        $ stack [
                sew (slow 2 $ bizy) (world $ s "qin02") (s "[qin03*15]")
                -- # n ("c'min7'4 f'min7'7")
                |+  n (scale "<yu>" "<[-12 .. <10 5>][<4 10 8 9 5> .. <0 -5 -8>]*[2]>" ) 
                |-  nl
                -- # lpf (range 3000 1000 $ rand)
                -- # lpq 0.1
        ]
         # sustain (slow 3 $ range 0.14 0.73 $ saw)
        --  # attack (world $ 0.1)
         # cps (slow 4 $ range 0.35 1 $ saw)
         # orbit (irand 7)
        --  + n ( range 0 12 $ smooth $ world $ sine )

let 
  spfx2 p = (# fshift  (dg 0.5 (osc64 14 100 304 sine) ))
  spfx1 p = ((# binshift (osc 16 15 0.12 0.24 sine )).(# comb 0.3).(# scram (osc 16 14 0.3 0.1 sine ))) $ p
  bone =  (# bpm (slow 5 $ smooth "120 120 160 110 160 40 100 60 100"))


d3
$ loopAt (segment 4 (choose [1,0.8,2]))
-- $ degradeBy 0.3
-- $ sometimes (* speed (-1))
-- $ spfx1
-- $ striateBy 10 0.2
$ bpm ((slow 13 $ smooth $ scramble 1 "120 100 16 110 16 40 300 60 100")*1)
>| s "[qin02*20,qin01*10]"
|+  n (("<[2 .. <10 5>][<4 10 8 9 5> .. <0 5 8>]*[2]>" ) * (run 50) )
# nr
-- # atrl 0.21 3.5
-- |+ delaytime (dg 0.6 ("<[20 .. <10 5>][<4 10 30 9 5> .. <0 2 8>]*[2]>" ) / 500 )
-- # delayfeedback 0.8
-- # delay 0.4
# accelerate ((choose [0.1,0.12 .. 0.2])# shrand 20) 
# speed ((choose [0.25,0.5 .. 2])# shrand 220) 
# orbit (irand 7)
# gain 1.5
-- # up ("c'major'4")

hush

